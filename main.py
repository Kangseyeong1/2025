# streamlit run app.py 로 실행하세요
# -*- coding: utf-8 -*-
import streamlit as st
import math
import re
from collections import defaultdict

# =====================================
# 기본 설정
# =====================================
st.set_page_config(page_title="화학식 정보 사전", page_icon="🧪")
st.title("🧪 화학식 정보 사전 (고등학생용)")
st.write("예: H2O, CO2, NaCl 같은 화학식의 기본 정보를 보여주고, 몰질량과 구성비를 계산합니다.")

# =====================================
# 최소 원자량 데이터 (교육용 반올림)
# 필요한 원소만 간단히 수록
# =====================================
ATOMIC_MASS = {
    'H': 1.008, 'C': 12.011, 'N': 14.007, 'O': 15.999,
    'Na': 22.990, 'Mg': 24.305, 'Al': 26.982, 'Si': 28.085, 'P': 30.974,
    'S': 32.06, 'Cl': 35.45, 'K': 39.098, 'Ca': 40.078, 'Fe': 55.845,
    'Cu': 63.546, 'Zn': 65.38
}

# =====================================
# 간단 화학식 파서 (괄호 소규모 지원)
# 예: H2O, CO2, Ca(OH)2
# =====================================
TOKEN = re.compile(r"([A-Z][a-z]?|\(|\)|\d+)")

def parse_formula(formula: str):
    tokens = TOKEN.findall(formula.replace(' ', ''))
    stack = [defaultdict(int)]
    i = 0
    def add(sym, n):
        stack[-1][sym] += n
    while i < len(tokens):
        t = tokens[i]
        if t == '(':
            stack.append(defaultdict(int))
            i += 1
        elif t == ')':
            i += 1
            mult = 1
            if i < len(tokens) and tokens[i].isdigit():
                mult = int(tokens[i]); i += 1
            group = stack.pop()
            for k, v in group.items():
                add(k, v * mult)
        elif t.isdigit():
            raise ValueError("숫자가 앞에 오는 표기는 지원하지 않습니다.")
        else:
            sym = t; i += 1
            mult = 1
            if i < len(tokens) and tokens[i].isdigit():
                mult = int(tokens[i]); i += 1
            add(sym, mult)
    if len(stack) != 1:
        raise ValueError("괄호 처리 오류")
    return dict(stack[0])

# =====================================
# 내장 화합물 정보 (조금 더 자세한 설명)
# =====================================
COMPOUNDS = {
    "H2O": {
        "이름": "물",
        "상태(상온)": "액체",
        "종류": "산화물",
        "설명": "지구에서 가장 풍부한 물질 중 하나로, 생명체에 필수적입니다. 극성 용매로서 많은 물질을 용해시킬 수 있어 화학 반응의 매개체 역할을 합니다.",
        "물리적 성질": "끓는점 100℃(1atm), 어는점 0℃, 밀도 약 1 g/cm³",
        "안전": "일반적으로 안전하나, 전기와 함께 사용할 경우 감전 위험이 있습니다."
    },
    "CO2": {
        "이름": "이산화탄소",
        "상태(상온)": "기체",
        "종류": "산화물",
        "설명": "호흡과 연소의 산물이며, 대기 중 약 0.04% 존재합니다. 광합성에 사용되고, 드라이아이스 형태로도 존재합니다.",
        "물리적 성질": "무색, 무취의 기체. 드라이아이스는 -78.5℃에서 승화.",
        "안전": "고농도에서는 질식 위험이 있으며, 밀폐된 공간에서는 환기가 필요합니다."
    },
    "O2": {
        "이름": "산소",
        "상태(상온)": "기체",
        "종류": "단원소 분자",
        "설명": "대기 중 약 21%를 차지하며, 연소와 호흡에 필수적입니다.",
        "물리적 성질": "무색, 무취의 기체. 끓는점 -183℃.",
        "안전": "자체는 가연성이 아니지만, 다른 물질의 연소를 강하게 돕습니다."
    },
    "N2": {
        "이름": "질소",
        "상태(상온)": "기체",
        "종류": "단원소 분자",
        "설명": "대기의 약 78%를 구성하며, 비교적 반응성이 낮습니다.",
        "물리적 성질": "무색, 무취의 기체. 끓는점 -196℃.",
        "안전": "고농도에서는 산소 결핍으로 인한 질식 위험이 있습니다."
    },
    "NaCl": {
        "이름": "염화 나트륨(소금)",
        "상태(상온)": "고체",
        "종류": "이온결합 화합물",
        "설명": "바닷물과 암염의 주성분이며, 음식 조리에 널리 사용됩니다.",
        "물리적 성질": "무색 결정. 녹는점 801℃, 끓는점 1413℃.",
        "안전": "보통 안전하나, 과다 섭취는 건강에 해롭습니다."
    },
    "HCl": {
        "이름": "염화수소(염산)",
        "상태(상온)": "수용액은 강산",
        "종류": "산",
        "설명": "강한 산성 물질로, 금속과 반응하여 수소 기체를 발생시킵니다.",
        "물리적 성질": "무색의 기체(순수 HCl). 수용액은 강한 산성.",
        "안전": "부식성이 강하므로, 피부와 눈을 보호해야 합니다."
    },
    "NH3": {
        "이름": "암모니아",
        "상태(상온)": "기체",
        "종류": "염기성 분자",
        "설명": "비료, 청소제, 냉매 등 다양한 산업적 용도로 사용됩니다.",
        "물리적 성질": "자극적인 냄새의 무색 기체. 끓는점 -33℃.",
        "안전": "흡입 시 유해하며, 눈과 호흡기에 자극을 줄 수 있습니다."
    },
    "CH4": {
        "이름": "메테인(메탄)",
        "상태(상온)": "기체",
        "종류": "탄화수소",
        "설명": "천연가스의 주성분으로, 중요한 연료입니다.",
        "물리적 성질": "무색, 무취(순수 상태) 기체. 끓는점 -161℃.",
        "안전": "가연성이 강하며, 폭발 위험이 있습니다."
    },
    "C2H5OH": {
        "이름": "에탄올",
        "상태(상온)": "액체",
        "종류": "알코올",
        "설명": "소독제, 연료, 음료(주류) 등에 사용됩니다.",
        "물리적 성질": "무색 액체. 끓는점 78℃, 물에 잘 섞임.",
        "안전": "인화성이 있어 불꽃과 열원에 주의해야 합니다."
    },
    "H2SO4": {
        "이름": "황산",
        "상태(상온)": "액체",
        "종류": "강산",
        "설명": "비료와 화학 산업에서 중요한 원료로 쓰입니다. 강한 탈수성과 산화성을 가집니다.",
        "물리적 성질": "점성이 높은 무색 액체. 끓는점 337℃.",
        "안전": "강부식성이며, 물과 섞을 때는 반드시 산에 물을 넣어야 합니다."
    },
    "NaHCO3": {
        "이름": "탄산수소나트륨(베이킹소다)",
        "상태(상온)": "고체",
        "종류": "염",
        "설명": "제과, 청소, 소화제 등 다양한 용도로 사용됩니다.",
        "물리적 성질": "흰색 고체 분말. 열을 받으면 CO2를 방출.",
        "안전": "일반적으로 안전하나, 과다 흡입 시 호흡기 자극 가능."
    },
    "CaCO3": {
        "이름": "탄산칼슘",
        "상태(상온)": "고체",
        "종류": "염",
        "설명": "석회석, 조개껍질, 대리석의 주성분입니다.",
        "물리적 성질": "흰색 고체. 물에 거의 녹지 않음.",
        "안전": "분진을 흡입하지 않도록 주의해야 합니다."
    }
}

# =====================================
# 계산 함수
# =====================================

def molar_mass(comp: dict):
    m = 0.0
    for el, n in comp.items():
        if el not in ATOMIC_MASS:
            raise KeyError(f"원자량 데이터 없음: {el}")
        m += ATOMIC_MASS[el] * n
    return m

# =====================================
# 입력 영역
# =====================================
formula = st.text_input("화학식 입력", value="H2O", help="예: H2O, CO2, NaCl, Ca(OH)2")

if formula:
    try:
        comp = parse_formula(formula)
        M = molar_mass(comp)

        # 이름/기본정보 찾기
        key_like = formula.replace(' ', '')
        info = COMPOUNDS.get(key_like)

        st.subheader("기본 정보")
        if info:
            st.write(f"**이름:** {info['이름']}")
            st.write(f"**종류:** {info['종류']} | **상태(상온):** {info['상태(상온)']}")
            st.write(f"**설명:** {info['설명']}")
            st.write(f"**물리적 성질:** {info['물리적 성질']}")
            st.write(f"**안전:** {info['안전']}")
        else:
            st.info("내장 사전에 없는 화합물입니다. 아래 계산 정보만 제공합니다.")

        st.subheader("조성 및 몰질량")
        col1, col2 = st.columns(2)
        with col1:
            st.markdown("**원소별 개수**")
            st.table({"원소": list(comp.keys()), "개수": list(comp.values())})
        with col2:
            st.metric("몰질량 (g/mol)", f"{M:.3f}")

        # 질량 백분율
        st.markdown("**질량 백분율(%)**")
        rows = []
        for el, n in comp.items():
            part = ATOMIC_MASS[el] * n
            pct = part / M * 100
            rows.append((el, round(pct, 3)))
        st.table({"원소": [r[0] for r in rows], "질량%": [r[1] for r in rows]})

    except Exception as e:
        st.error(f"해석/계산 오류: {e}")

st.divider()
st.caption("※ 교육용 간이 도구입니다. 정확한 수치/안전 정보는 교과서와 공인 자료를 확인하세요.")

